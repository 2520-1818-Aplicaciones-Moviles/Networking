<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/semana4_1_retrofit/model/Article.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/semana4_1_retrofit/model/Article.kt" />
              <option name="updatedContent" value="package com.example.semana4_1_retrofit.model&#10;&#10;/**&#10; * Data class representing the source of an article.&#10; */&#10;data class Source(&#10;    val id: String?,&#10;    val name: String&#10;)&#10;&#10;/**&#10; * Data class representing an article.&#10; */&#10;data class Article(&#10;    val source: Source,&#10;    val author: String?,&#10;    val title: String,&#10;    val description: String?,&#10;    val url: String,&#10;    val urlToImage: String?,&#10;    val publishedAt: String?,&#10;    val content: String?&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/semana4_1_retrofit/model/response/WebService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/semana4_1_retrofit/model/response/WebService.kt" />
              <option name="originalContent" value="package com.example.semana4_1_retrofit.model.response&#10;&#10;import com.example.semana4_1_retrofit.model.Sites&#10;import com.example.semana4_1_retrofit.model.Article&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;&#10;/**&#10; * This interface defines the web service endpoints for Retrofit.&#10; * It includes methods to fetch a list of sites and articles from the specified endpoints.&#10; *&#10; *&#10; * @param getSitios&#10; * A suspend function that performs a GET request to the &quot;sitios.php&quot; endpoint&#10; * @param getArticles&#10; * A suspend function that performs a GET request to the &quot;articles.php&quot; endpoint with description=all&#10; * */&#10;&#10;interface WebService {&#10;    @GET(&quot;sitios.php&quot;)&#10;    suspend fun getSitios(): Response&lt;List&lt;Sites&gt;&gt;&#10;&#10;    @GET(&quot;articles.php?description=all&quot;)&#10;    suspend fun getArticles(): Response&lt;List&lt;Article&gt;&gt;&#10;}" />
              <option name="updatedContent" value="package com.example.semana4_1_retrofit.model.response&#10;&#10;import com.example.semana4_1_retrofit.model.Sites&#10;import com.example.semana4_1_retrofit.model.Article&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;&#10;/**&#10; * This interface defines the web service endpoints for Retrofit.&#10; * It includes methods to fetch a list of sites and articles from the specified endpoints.&#10; *&#10; *&#10; * @param getSitios&#10; * A suspend function that performs a GET request to the &quot;sitios.php&quot; endpoint&#10; * @param getArticles&#10; * A suspend function that performs a GET request to the &quot;articles.php&quot; endpoint with description=all&#10; * */&#10;&#10;interface WebService {&#10;    @GET(&quot;sitios.php&quot;)&#10;    suspend fun getSitios(): Response&lt;List&lt;Sites&gt;&gt;&#10;&#10;    @GET(&quot;articles.php?description=all&quot;)&#10;    suspend fun getArticles(): Response&lt;List&lt;Article&gt;&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/semana4_1_retrofit/views/ArticlesList.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/semana4_1_retrofit/views/ArticlesList.kt" />
              <option name="originalContent" value="package com.example.semana4_1_retrofit.views&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.bumptech.glide.integration.compose.ExperimentalGlideComposeApi&#10;import com.bumptech.glide.integration.compose.GlideImage&#10;import com.example.semana4_1_retrofit.model.Article&#10;&#10;/**&#10; * Composable function to display a list of articles in a scrollable column.&#10; * Each article is shown as a card with image, title, author, and description.&#10; */&#10;@OptIn(ExperimentalGlideComposeApi::class)&#10;@Composable&#10;fun ArticlesList(articles: ArrayList&lt;Article&gt;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(15.dp)&#10;    ) {&#10;        LazyColumn(&#10;            contentPadding = PaddingValues(&#10;                horizontal = 15.dp,&#10;                vertical = 5.dp&#10;            )&#10;        ) {&#10;            items(articles) { article -&gt;&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 6.dp),&#10;                    elevation = CardDefaults.elevatedCardElevation(5.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(10.dp),&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        article.urlToImage?.let {&#10;                            GlideImage(&#10;                                model = it,&#10;                                contentDescription = null,&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp)&#10;                            )&#10;                        }&#10;                        Text(text = &quot;Title: ${article.title}&quot;)&#10;                        Text(text = &quot;Author: ${article.author ?: &quot;Unknown&quot;}&quot;)&#10;                        Text(text = &quot;Source: ${article.source.name}&quot;)&#10;                        Text(text = &quot;Description: ${article.description ?: &quot;No description&quot;}&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.semana4_1_retrofit.views&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.bumptech.glide.integration.compose.ExperimentalGlideComposeApi&#10;import com.bumptech.glide.integration.compose.GlideImage&#10;import com.example.semana4_1_retrofit.model.Article&#10;&#10;/**&#10; * Composable function to display a list of articles in a scrollable column.&#10; * Each article is shown as a card with image, title, author, and description.&#10; */&#10;@OptIn(ExperimentalGlideComposeApi::class)&#10;@Composable&#10;fun ArticlesList(articles: ArrayList&lt;Article&gt;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(15.dp)&#10;    ) {&#10;        LazyColumn(&#10;            contentPadding = PaddingValues(&#10;                horizontal = 15.dp,&#10;                vertical = 5.dp&#10;            )&#10;        ) {&#10;            items(articles) { article -&gt;&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 6.dp),&#10;                    elevation = CardDefaults.elevatedCardElevation(5.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(10.dp),&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        article.urlToImage?.let {&#10;                            GlideImage(&#10;                                model = it,&#10;                                contentDescription = null,&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .height(200.dp)&#10;                            )&#10;                        }&#10;                        Text(text = &quot;Title: ${article.title}&quot;)&#10;                        Text(text = &quot;Author: ${article.author ?: &quot;Unknown&quot;}&quot;)&#10;                        Text(text = &quot;Source: ${article.source.name}&quot;)&#10;                        Text(text = &quot;Description: ${article.description ?: &quot;No description&quot;}&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>